library(VennDiagram),
library(clusterProfiler),
library(DOSE),
library(org.Mm.eg.db),
library(pathview),
library(AnnotationDbi),
library(gtools))
)
# Generate a tx2gene object for matrix generation
edb <- EnsDb.Mmusculus.v79
transcriptsID <- as.data.frame(transcripts(edb))
tx2gene <- as.data.frame(cbind(transcriptsID$tx_id, transcriptsID$gene_id))
# Generate DESeqData using the counting result generated using Salmon
setwd("/Users/mizuhi/OneDrive - Harvard University/Haigis Lab/Projects/Halo-Ago2/Halo-Ago-KRas/Raw Data/RNA-Seq/Mouse colon tumor/Fabp constitutive model/Salmon/Gene counts")
inDir = getwd()
countFiles = list.files(inDir, pattern=".sf$", full.names = TRUE)
countFiles = c(countFiles[6:10], countFiles[1:5])
basename(countFiles)
names(countFiles) <- c('KrasWT_1','KrasWT_2','KrasWT_3','KrasWT_4','KrasWT_5','KrasG12D_1','KrasG12D_2','KrasG12D_3','KrasG12D_4', 'KrasG12D_5')
txi.salmon <- tximport(countFiles, type = "salmon", tx2gene = tx2gene, ignoreTxVersion = TRUE)
DESeqsampletable <- data.frame(condition = c('control','control','control','control','control','experimental','experimental','experimental','experimental','experimental'))
rownames(DESeqsampletable) <- colnames(txi.salmon$counts)
ddsHTSeq<- DESeqDataSetFromTximport(txi.salmon, DESeqsampletable, ~condition)
ddsHTSeq_norm <- estimateSizeFactors(ddsHTSeq)
suppressMessages(ddsHTSeq_analysis <- DESeq(ddsHTSeq_norm))
ddsHTSeq_analysis <- lfcShrink(ddsHTSeq_analysis, coef = 2)
plotMA(ddsHTSeq_analysis)
rawCountTable <- as.data.frame(counts(ddsHTSeq_norm, normalized = TRUE))
pseudoCount = log2(rawCountTable + 1)
grid.arrange(
ggplot(pseudoCount, aes(x= KrasWT_1)) + xlab(expression(log[2](count + 1))) + ylab("Number of Genes") +
geom_histogram(colour = "white", fill = "#525252", binwidth = 0.6) + labs(title = "KrasWT_1"),
ggplot(pseudoCount, aes(x= KrasWT_2)) + xlab(expression(log[2](count + 1))) + ylab("Number of Genes") +
geom_histogram(colour = "white", fill = "#525252", binwidth = 0.6) + labs(title = "KrasWT_2"),
ggplot(pseudoCount, aes(x= KrasWT_3)) + xlab(expression(log[2](count + 1))) + ylab("Number of Genes") +
geom_histogram(colour = "white", fill = "#525252", binwidth = 0.6) + labs(title = "KrasWT_3"),
ggplot(pseudoCount, aes(x= KrasWT_4)) + xlab(expression(log[2](count + 1))) + ylab("Number of Genes") +
geom_histogram(colour = "white", fill = "#525252", binwidth = 0.6) + labs(title = "KrasWT_4"),
ggplot(pseudoCount, aes(x= KrasWT_5)) + xlab(expression(log[2](count + 1))) + ylab("Number of Genes") +
geom_histogram(colour = "white", fill = "#525252", binwidth = 0.6) + labs(title = "KrasWT_5"), nrow = 2)
grid.arrange(
ggplot(pseudoCount, aes(x= KrasG12D_1)) + xlab(expression(log[2](count + 1))) + ylab("Number of Genes") +
geom_histogram(colour = "white", fill = "#525252", binwidth = 0.6) + labs(title = "KrasG12D_1"),
ggplot(pseudoCount, aes(x= KrasG12D_2)) + xlab(expression(log[2](count + 1))) + ylab("Number of Genes") +
geom_histogram(colour = "white", fill = "#525252", binwidth = 0.6) + labs(title = "KrasG12D_2"),
ggplot(pseudoCount, aes(x= KrasG12D_3)) + xlab(expression(log[2](count + 1))) + ylab("Number of Genes") +
geom_histogram(colour = "white", fill = "#525252", binwidth = 0.6) + labs(title = "KrasG12D_3"),
ggplot(pseudoCount, aes(x= KrasG12D_4)) + xlab(expression(log[2](count + 1))) + ylab("Number of Genes") +
geom_histogram(colour = "white", fill = "#525252", binwidth = 0.6) + labs(title = "KrasG12D_4"),
ggplot(pseudoCount, aes(x= KrasG12D_5)) + xlab(expression(log[2](count + 1))) + ylab("Number of Genes") +
geom_histogram(colour = "white", fill = "#525252", binwidth = 0.6) + labs(title = "KrasG12D_5"), nrow = 2)
#Boxplots
suppressMessages(df <- melt(pseudoCount, variable_name = "Samples"))
df <- data.frame(df, Condition = substr(df$Samples,1,7))
ggplot(df, aes(x=Samples, y=value, fill = Condition)) + geom_boxplot() + xlab("") +
ylab(expression(log[2](count+1))) + scale_fill_manual(values = c("#619CFF", "#F564E3")) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
#Histograms and density plots
ggplot(df, aes(x=value, colour = Samples, fill = Samples)) + ylim(c(0, 0.25)) +
geom_density(alpha = 0.2, size = 1.25) + facet_wrap(~ Condition) +
theme(legend.position = "top") + xlab(expression(log[2](count+1)))
## WT1 vs WT2
x = pseudoCount[, 1]
y = pseudoCount[, 2]
## M-values
M = x - y
## A-values
A = (x + y)/2
df = data.frame(A, M)
suppressWarnings(
ggplot(df, aes(x = A, y = M)) + geom_point(size = 1.5, alpha = 1/5) +
geom_hline(color = "blue3", yintercept = 0) + stat_smooth(se = FALSE, method = "loess", color = "red3") + labs(title = "KrasWT_1 vs KrasWT_2"))
## WT1 vs WT3
x = pseudoCount[, 1]
y = pseudoCount[, 3]
## M-values
M = x - y
## A-values
A = (x + y)/2
df = data.frame(A, M)
suppressWarnings(
ggplot(df, aes(x = A, y = M)) + geom_point(size = 1.5, alpha = 1/5) +
geom_hline(color = "blue3", yintercept = 0) + stat_smooth(se = FALSE, method = "loess", color = "red3") + labs(title = "KrasWT_1 vs KrasWT_3"))
## G12D_1 vs G12D_2
x = pseudoCount[, 6]
y = pseudoCount[, 7]
## M-values
M = x - y
## A-values
A = (x + y)/2
df = data.frame(A, M)
suppressWarnings(
ggplot(df, aes(x = A, y = M)) + geom_point(size = 1.5, alpha = 1/5) +
geom_hline(color = "blue3", yintercept = 0) + stat_smooth(se = FALSE, method = "loess", color = "red3") + labs(title = "KrasG12D_1 vs KrasG12D_2"))
## G12D_1 vs G12D_2
x = pseudoCount[, 6]
y = pseudoCount[, 8]
## M-values
M = x - y
## A-values
A = (x + y)/2
df = data.frame(A, M)
suppressWarnings(
ggplot(df, aes(x = A, y = M)) + geom_point(size = 1.5, alpha = 1/5) +
geom_hline(color = "blue3", yintercept = 0) + stat_smooth(se = FALSE, method = "loess", color = "red3") + labs(title = "KrasG12D_1 vs KrasG12D_3"))
ddsHTSeq_transform <- varianceStabilizingTransformation(ddsHTSeq)
rawCountTable_transform <- as.data.frame(assay(ddsHTSeq_transform))
pseudoCount_transform = log2(rawCountTable_transform + 1)
mat.dist = pseudoCount_transform
mat.dist = as.matrix(dist(t(mat.dist)))
mat.dist = mat.dist/max(mat.dist)
setwd("/Users/mizuhi/OneDrive - Harvard University/Haigis Lab/Projects/Halo-Ago2/Halo-Ago-KRas/Raw Data/RNA-Seq/Mouse colon tumor/Fabp constitutive model/Salmon/Analysis")
png('Hierchical_Clustering.png')
cim(mat.dist, symkey = FALSE, margins = c(5, 5))
suppressMessages(dev.off())
plotPCA(ddsHTSeq_transform, intgroup = "condition", ntop = 500)
keep <- rowSums(rawCountTable) > 0
filterCount <- pseudoCount[keep,]
df <- melt(filterCount, variable_name = "Samples")
df <- data.frame(df, Condition = substr(df$Samples,1,7))
detected_raw_count_norm <- rawCountTable[keep,]
write.csv(detected_raw_count_norm, "normalized_raw_gene_counts.csv")
ggplot(df, aes(x=value, colour = Samples, fill = Samples)) +
geom_density(alpha = 0.2, size = 1.25) + facet_wrap(~ Condition) +
theme(legend.position = "top") + xlab("pseudocounts")
# annotate gene count list with gene name and write out as txt file for CiberSort
# Return the Ensembl IDs for a set of genes
annotations_cs <- AnnotationDbi::select(EnsDb.Mmusculus.v79,
keys = rownames(detected_raw_count_norm),
columns = c("GENENAME"),
keytype = "GENEID")
# Determine the indices for the non-duplicated genes
non_duplicates_cs <- which(duplicated(annotations_cs$GENENAME) == FALSE)
# Return only the non-duplicated genes using indices
annotations_cs <- annotations_cs[non_duplicates_cs, ]
# Check number of NAs returned
is.na(annotations_cs$GENENAME) %>%
which() %>%
length()
# join the expression data with gene names
detected_raw_count_norm_cs <- as_tibble(detected_raw_count_norm, rownames = "ENSEMBL_ID")
detected_raw_count_norm_cs <- inner_join(detected_raw_count_norm_cs,annotations_cs, by=c("ENSEMBL_ID"="GENEID"))
detected_raw_count_norm_cs[,1] <- detected_raw_count_norm_cs[,dim(detected_raw_count_norm_cs)[2]]
detected_raw_count_norm_cs <- detected_raw_count_norm_cs[,-dim(detected_raw_count_norm_cs)[2]]
colnames(detected_raw_count_norm_cs)[1] <- "GENEID"
# convert the gene names to all capitalized letters for use in Cibersort
detected_raw_count_norm_cs$GENEID <- toupper(detected_raw_count_norm_cs$GENEID)
# I need to filter the list for genes that exist in the signature gene list
# load the LM22 signature gene list
LM22_signature <- read_csv("/Users/mizuhi/OneDrive - Harvard University/Haigis Lab/Projects/Halo-Ago2/Halo-Ago-KRas/Raw Data/RNA-Seq/Mouse colon epithelium/Analysis/CiberSort/LM22_signature.csv")
LM22_signature <- LM22_signature[,1]
colnames(LM22_signature)[1] <- "GENEID"
detected_raw_count_norm_cs <- inner_join(detected_raw_count_norm_cs,LM22_signature, by = c("GENEID" = "GENEID"))
setwd("/Users/mizuhi/OneDrive - Harvard University/Haigis Lab/Projects/Halo-Ago2/Halo-Ago-KRas/Raw Data/RNA-Seq/Mouse colon tumor/Fabp constitutive model/Salmon/Analysis/CiberSoft")
# annotate gene count list with gene name and write out as txt file for CiberSort
# Return the Ensembl IDs for a set of genes
annotations_cs <- AnnotationDbi::select(EnsDb.Mmusculus.v79,
keys = rownames(detected_raw_count_norm),
columns = c("GENENAME"),
keytype = "GENEID")
# Determine the indices for the non-duplicated genes
non_duplicates_cs <- which(duplicated(annotations_cs$GENENAME) == FALSE)
# Return only the non-duplicated genes using indices
annotations_cs <- annotations_cs[non_duplicates_cs, ]
# Check number of NAs returned
is.na(annotations_cs$GENENAME) %>%
which() %>%
length()
# join the expression data with gene names
detected_raw_count_norm_cs <- as_tibble(detected_raw_count_norm, rownames = "ENSEMBL_ID")
detected_raw_count_norm_cs <- inner_join(detected_raw_count_norm_cs,annotations_cs, by=c("ENSEMBL_ID"="GENEID"))
detected_raw_count_norm_cs[,1] <- detected_raw_count_norm_cs[,dim(detected_raw_count_norm_cs)[2]]
detected_raw_count_norm_cs <- detected_raw_count_norm_cs[,-dim(detected_raw_count_norm_cs)[2]]
colnames(detected_raw_count_norm_cs)[1] <- "GENEID"
# convert the gene names to all capitalized letters for use in Cibersort
detected_raw_count_norm_cs$GENEID <- toupper(detected_raw_count_norm_cs$GENEID)
# I need to filter the list for genes that exist in the signature gene list
# load the LM22 signature gene list
LM22_signature <- read_csv("/Users/mizuhi/OneDrive - Harvard University/Haigis Lab/Projects/Halo-Ago2/Halo-Ago-KRas/Raw Data/RNA-Seq/Mouse colon epithelium/Analysis/CiberSort/LM22_signature.csv")
LM22_signature <- LM22_signature[,1]
colnames(LM22_signature)[1] <- "GENEID"
detected_raw_count_norm_cs <- inner_join(detected_raw_count_norm_cs,LM22_signature, by = c("GENEID" = "GENEID"))
setwd("/Users/mizuhi/OneDrive - Harvard University/Haigis Lab/Projects/Halo-Ago2/Halo-Ago-KRas/Raw Data/RNA-Seq/Mouse colon tumor/Fabp constitutive model/Salmon/Analysis/CiberSort")
write.csv(detected_raw_count_norm_cs, "normalized_raw_gene_counts_for_Cibersort.csv")
cs_result <- read_csv("/Users/mizuhi/OneDrive - Harvard University/Haigis Lab/Projects/Halo-Ago2/Halo-Ago-KRas/Raw Data/RNA-Seq/Mouse colon tumor/Fabp constitutive model/Salmon/Analysis/CiberSort/CIBERSORT.Output_Job3.csv")
cs_result <- as.data.frame(cs_result)
rownames(cs_result) <- cs_result[,1]
cs_result <- cs_result[,-1]
cs_result <- t(cs_result)
cs_result <- cs_result[-c(23,24,25),]
# filter out cells that had 0 count
keep_cs <- rowSums(cs_result) > 0
# calculate the stats for each cell type with values
cs_result <- cs_result[keep_cs,]
# Calculate the pvalue using parametric unpaired t test
p_value_list <- c()
for (i in 1:dim(cs_result)[1]) {
p_value <- t.test(unlist(cs_result[i,6:10]), unlist(cs_result[i,1:5]), paired = FALSE)$p.value
p_value_list <- c(p_value_list, p_value)
}
cs_result <- cbind(cs_result, p_value_list)
colnames(cs_result)[11] <- "p_values"
# calculate the q value using Benjamini Hochberg FDR correction
q_value_list <- p.adjust(cs_result[,11], method = "BH")
cs_result <- cbind(cs_result, q_value_list)
colnames(cs_result)[12] <- "q_values"
# calculate fold change and log fold change
foldchange_list <- c()
for (i in 1:dim(cs_result)[1]) {
foldchange <- foldchange(mean(unlist(cs_result[i,6:10])), mean(unlist(cs_result[i,1:5])))
foldchange_list <- c(foldchange_list, foldchange)
}
logfoldchange_list <- foldchange2logratio(foldchange_list)
cs_result <- cbind(cs_result, foldchange_list, logfoldchange_list)
colnames(cs_result)[13:14] <- c("foldChange", "LFC")
# output the analysis file
setwd("/Users/mizuhi/OneDrive - Harvard University/Haigis Lab/Projects/Halo-Ago2/Halo-Ago-KRas/Raw Data/RNA-Seq/Mouse colon tumor/Fabp constitutive model/Salmon/Analysis/CiberSort")
write.csv(cs_result, "CiberSort_de_analysis.csv")
write.csv(as.data.frame(ddsHTSeq_analysis[keep,]), "Differential Analysis.csv")
suppressMessages(library(mosaic))
dif_analysis <- as.data.frame(ddsHTSeq_analysis)[keep,]
sig_dif <- subset(dif_analysis, dif_analysis$padj < 0.05)
sig_index <- c()
for (i in 1:dim(sig_dif)[1]) {
sig_index <- c(sig_index ,grep(rownames(sig_dif)[i], rownames(filterCount)))
}
sig_count <- filterCount[sig_index,]
sig_dif <- cbind(sig_dif, sig_count)
for (i in 1:dim(sig_dif)[1]) {
sig_dif[i,7:16] <- zscore(as.numeric(sig_dif[i,7:16]))
}
my_palette <- colorRampPalette(c("red", "white", "blue"))(256)
heatmap_matrix <- as.matrix(sig_dif[,7:16])
png('G12D vs WT Tumor RNASeq.png',
width = 300,
height = 600,
res = 100,
pointsize = 8)
heatmap.2(heatmap_matrix,
main = "Tumor RNASeq",
density.info = "none",
key = TRUE,
lhei = c(1,7),
col=my_palette,
cexCol = 1,
margins = c(8,2),
trace = "none",
dendrogram = "both",
labRow = FALSE,
keysize = 2,
ylab = "Genes",
Colv = "NA")
dev.off()
# Scatter plot
detected_pseudocount <- pseudoCount[keep,]
dif_analysis$KrasG12D_mean <- rowMeans(detected_pseudocount[,1:5])
dif_analysis$KrasWT_mean <- rowMeans(detected_pseudocount[,6:10])
ggplot(dif_analysis, aes(x = KrasWT_mean, y = KrasG12D_mean)) +
xlab("WT_Average(log2)") + ylab("G12D_Average(log2)") +
geom_point(data = dif_analysis, alpha = 0.5, size = 1, color = "grey") +
geom_point(data = subset(dif_analysis, padj < 0.05 & log2FoldChange > 0), alpha = 0.5, size = 1, color = "red") +
geom_point(data = subset(dif_analysis, padj < 0.05 & log2FoldChange < 0), alpha = 0.5, size = 1, color = "blue") +
labs(title = "WT vs G12D Scatter Plot")
# MA plot
ggplot(dif_analysis, aes(x = log(baseMean,2), y = log2FoldChange,)) +
xlab("Average Expression") + ylab("LFC") +
geom_point(data = dif_analysis, alpha = 0.5, size = 1, color = "grey") +
geom_point(data = subset(dif_analysis, padj < 0.05 & log2FoldChange > 0), alpha = 0.5, size = 1, color = "red") +
geom_point(data = subset(dif_analysis, padj < 0.05 & log2FoldChange < 0), alpha = 0.5, size = 1, color = "blue") +
labs(title = "WT vs G12D MA Plot")
# Volcano Plot
ggplot(dif_analysis, aes(x = log2FoldChange, y = -log(pvalue,10))) +
xlab("LFC") + ylab("-log10(P value)") +
geom_point(data = dif_analysis, alpha = 0.5, size = 1, color = "black") +
geom_point(data = subset(dif_analysis, padj < 0.05 & log2FoldChange > 0), alpha = 0.5, size = 1, color = "red") +
geom_point(data = subset(dif_analysis, padj < 0.05 & log2FoldChange < 0), alpha = 0.5, size = 1, color = "blue") +
labs(title = "WT vs G12D Volcano Plot") +
xlim(-3,3)
target_gene <- as.character(rownames(sig_dif))
detected_gene <- as.character(rownames(detected_pseudocount))
# Run GO enrichment analysis for biological process
ego_BP <- enrichGO(gene = target_gene,
universe = detected_gene,
keyType = "ENSEMBL",
OrgDb = org.Mm.eg.db,
ont = "BP",
pAdjustMethod = "BH",
pvalueCutoff = 0.05,
readable = TRUE)
# Output results from GO analysis to a table
cluster_summary_BP <- data.frame(ego_BP)
write.csv(cluster_summary_BP, "GO/GO analysis_BP.csv")
# Run GO enrichment analysis for molecular function
ego_MF <- enrichGO(gene = target_gene,
universe = detected_gene,
keyType = "ENSEMBL",
OrgDb = org.Mm.eg.db,
ont = "MF",
pAdjustMethod = "BH",
pvalueCutoff = 0.05,
readable = TRUE)
# Output results from GO analysis to a table
cluster_summary_MF <- data.frame(ego_MF)
write.csv(cluster_summary_MF, "GO/GO analysis_MF.csv")
# Run GO enrichment analysis for cellular component
ego_CC <- enrichGO(gene = target_gene,
universe = detected_gene,
keyType = "ENSEMBL",
OrgDb = org.Mm.eg.db,
ont = "CC",
pAdjustMethod = "BH",
pvalueCutoff = 0.05,
readable = TRUE)
# Output results from GO analysis to a table
cluster_summary_CC <- data.frame(ego_CC)
write.csv(cluster_summary_CC, "GO/GO analysis_CC.csv")
png('GO/GO dotplot_BP.png',
width = 1600,
height = 1600,
res = 100,
pointsize = 8)
dotplot(ego_BP, showCategory=50)
dev.off()
png('GO/GO dotplot_MF.png',
width = 1200,
height = 800,
res = 100,
pointsize = 8)
dotplot(ego_MF, showCategory=50)
dev.off()
png('GO/GO dotplot_CC.png',
width = 1200,
height = 1200,
res = 100,
pointsize = 8)
dotplot(ego_CC, showCategory=50)
dev.off()
png('GO/GO enrichment_BP.png',
width = 1600,
height = 1600,
res = 100,
pointsize = 8)
emapplot(ego_BP, showCategory = 50)
dev.off()
png('GO/GO enrichment_MF.png',
width = 1600,
height = 1600,
res = 100,
pointsize = 8)
emapplot(ego_MF, showCategory = 50)
dev.off()
png('GO/GO enrichment_CC.png',
width = 1600,
height = 1600,
res = 100,
pointsize = 8)
emapplot(ego_CC, showCategory = 50)
dev.off()
OE_foldchanges <- sig_dif$log2FoldChange
names(OE_foldchanges) <- rownames(sig_dif)
png('GO/GO cnetplot_BP.png',
width = 1600,
height = 1600,
res = 100,
pointsize = 8)
cnetplot(ego_BP,
categorySize="pvalue",
showCategory = 5,
foldChange=OE_foldchanges,
vertex.label.font=6)
dev.off()
png('GO/GO cnetplot_MF.png',
width = 1600,
height = 1600,
res = 100,
pointsize = 8)
cnetplot(ego_MF,
categorySize="pvalue",
showCategory = 5,
foldChange=OE_foldchanges,
vertex.label.font=6)
dev.off()
png('GO/GO cnetplot_CC.png',
width = 1600,
height = 1600,
res = 100,
pointsize = 8)
cnetplot(ego_CC,
categorySize="pvalue",
showCategory = 5,
foldChange=OE_foldchanges,
vertex.label.font=6)
dev.off()
proteomics_quant <- read_csv("/Users/mizuhi/OneDrive - Harvard University/Haigis Lab/Projects/Halo-Ago2/Halo-Ago-KRas/Raw Data/Proteomics data/colon tumor-enema model/2017-03-19_Haigis_5v5_Pro.csv")
proteomics_diff <- read_csv("/Users/mizuhi/OneDrive - Harvard University/Haigis Lab/Projects/Halo-Ago2/Halo-Ago-KRas/Raw Data/Proteomics data/colon tumor-enema model/crcMS_diff.csv")
# Return the Ensembl IDs for a set of genes
annotations_edb <- AnnotationDbi::select(EnsDb.Mmusculus.v79,
keys = proteomics_quant$`Protein Id`,
columns = c("GENEID", "GENENAME"),
keytype = "UNIPROTID")
# Determine the indices for the non-duplicated genes
non_duplicates_idx <- which(duplicated(annotations_edb$UNIPROTID) == FALSE)
non_duplicates_idx <- which(duplicated(annotations_edb$GENEID) == FALSE)
# Return only the non-duplicated genes using indices
annotations_edb <- annotations_edb[non_duplicates_idx, ]
# Check number of NAs returned
is.na(annotations_edb$GENEID) %>%
which() %>%
length()
proteomics_quant <- as_tibble(proteomics_quant)
proteomics_diff <- as_tibble(proteomics_diff)
dif_analysis$GeneID <- rownames(dif_analysis)
dif_analysis_tib <- as_tibble(dif_analysis)
proteomics_quant <- inner_join(proteomics_quant, annotations_edb, by=c("Protein Id"="UNIPROTID"))
proteomics_diff <- inner_join(proteomics_diff, annotations_edb, by=c("Protein Id"="UNIPROTID"))
overlap <- intersect(rownames(detected_raw_count_norm), proteomics_quant$GENEID)
overlap_lfc <- inner_join(dif_analysis_tib[,c(2,9)], proteomics_diff[,c(7,8)], by=c("GeneID"="GENEID"))
colnames(overlap_lfc) <- c('rna_lfc', 'GeneID', 'protein_lfc')
overlap_lfc$rna_lfc <- as.numeric(as.character(overlap_lfc$rna_lfc))
overlap_lfc$protein_lfc <- as.numeric(as.character(overlap_lfc$protein_lfc))
# Plot scatterplot and calculate the Spearman Correlation
ggplot(overlap_lfc, aes(x = rna_lfc, y = protein_lfc)) +
geom_point(data = overlap_lfc, alpha = 0.5, size = 1, color = "black") +
xlab("RNA LFC (KRas/WT)") + ylab("Protein LFC (KRas/WT)") +
labs(title = "Correlation between proteomics and transcriptomics") +
xlim(-3,3) + ylim(-3,3)
# Correlation test
cor.test(overlap_lfc$rna_lfc, overlap_lfc$protein_lfc)
overlap_p <- inner_join(dif_analysis_tib[,c(6,9)], proteomics_diff[,c(4,5,8)], by=c("GeneID"="GENEID"))
colnames(overlap_p) <- c('rna_p', 'GeneID', 'protein_p', 'protein_q')
overlap_p$rna_p <- as.numeric(as.character(overlap_p$rna_p))
overlap_p$protein_p <- as.numeric(as.character(overlap_p$protein_p))
overlap_p$protein_q <- as.numeric(as.character(overlap_p$protein_q))
rna_de <- subset(overlap_p, overlap_p$rna_p < 0.05)$GeneID
protein_de <- subset(overlap_p, overlap_p$protein_p < 0.05 & overlap_p$protein_q < 0.1)$GeneID
overlap_de <- intersect(rna_de, protein_de)
grid.newpage()
draw.pairwise.venn(length(rna_de),
length(protein_de),
length(overlap_de),
catergory <- c("DE_Transcriptomics",
"DE_Proteomics"),
lty = "blank",
ex.text = FALSE,
fill = c("pink", "lightblue"),
cat.pos = c(200, 135), cat.dist = 0.05, margin = 0.05,
fontfamily = "sans", cat.fontfamily = "sans")
setwd("~/OneDrive - Harvard University/Haigis Lab/Projects/Halo-Ago2/Halo-Ago-KRas/Raw Data/RNA-Seq/Mouse colon epithelium/Analysis/CiberSort")
knitr::opts_chunk$set(echo = TRUE)
cs_result <- read_csv("/Users/mizuhi/OneDrive - Harvard University/Haigis Lab/Projects/Halo-Ago2/Halo-Ago-KRas/Raw Data/RNA-Seq/Mouse colon epithelium/Analysis/CiberSort/CIBERSORT.Output_Job2.csv")
cs_result <- as.data.frame(cs_result)
rownames(cs_result) <- cs_result[,1]
cs_result <- cs_result[,-1]
cs_result <- t(cs_result)
cs_result <- cs_result[-c(23,24,25),]
# filter out cells that had 0 count
keep_cs <- rowSums(cs_result) > 0
# calculate the stats for each cell type with values
cs_result <- cs_result[keep_cs,]
# Calculate the pvalue using parametric unpaired t test
p_value_list <- c()
for (i in 1:dim(cs_result)[1]) {
p_value <- t.test(unlist(cs_result[i,6:10]), unlist(cs_result[i,1:5]), paired = FALSE)$p.value
p_value_list <- c(p_value_list, p_value)
}
View(cs_result)
cs_result <- read_csv("/Users/mizuhi/OneDrive - Harvard University/Haigis Lab/Projects/Halo-Ago2/Halo-Ago-KRas/Raw Data/RNA-Seq/Mouse colon epithelium/Analysis/CiberSort/CIBERSORT.Output_Job2.csv")
cs_result <- as.data.frame(cs_result)
rownames(cs_result) <- cs_result[,1]
cs_result <- cs_result[,-1]
cs_result <- t(cs_result)
cs_result <- cs_result[-c(23,24,25),]
cs_result <- read_csv("/Users/mizuhi/OneDrive - Harvard University/Haigis Lab/Projects/Halo-Ago2/Halo-Ago-KRas/Raw Data/RNA-Seq/Mouse colon epithelium/Analysis/CiberSort/CIBERSORT.Output_Job2.csv")
cs_result <- as.data.frame(cs_result)
cs_result <- cs_result[,-1]
cs_result <- t(cs_result)
cs_result <- cs_result[-c(23,24,25),]
# filter out cells that had 0 count
keep_cs <- rowSums(cs_result) > 0
# calculate the stats for each cell type with values
cs_result <- cs_result[keep_cs,]
# Calculate the pvalue using parametric unpaired t test
p_value_list <- c()
for (i in 1:dim(cs_result)[1]) {
p_value <- t.test(unlist(cs_result[i,5:8]), unlist(cs_result[i,1:4]), paired = FALSE)$p.value
p_value_list <- c(p_value_list, p_value)
}
cs_result <- cbind(cs_result, p_value_list)
colnames(cs_result)[9] <- "p_values"
# calculate the q value using Benjamini Hochberg FDR correction
q_value_list <- p.adjust(cs_result[,9], method = "BH")
cs_result <- cbind(cs_result, q_value_list)
colnames(cs_result)[10] <- "q_values"
# calculate fold change and log fold change
foldchange_list <- c()
foldchange <- foldchange(mean(unlist(cs_result[i,5:8])), mean(unlist(cs_result[i,1:4])))
for (i in 1:dim(cs_result)[1]) {
foldchange <- foldchange(mean(unlist(cs_result[i,5:8])), mean(unlist(cs_result[i,1:4])))
foldchange_list <- c(foldchange_list, foldchange)
}
# calculate fold change and log fold change
foldchange_list <- c()
for (i in 1:dim(cs_result)[1]) {
foldchange <- foldchange(mean(unlist(cs_result[i,5:8])), mean(unlist(cs_result[i,1:4])))
foldchange_list <- c(foldchange_list, foldchange)
}
logfoldchange_list <- foldchange2logratio(foldchange_list)
cs_result <- cbind(cs_result, foldchange_list, logfoldchange_list)
colnames(cs_result)[11:12] <- c("foldChange", "LFC")
# output the analysis file
setwd("/Users/mizuhi/OneDrive - Harvard University/Haigis Lab/Projects/Halo-Ago2/Halo-Ago-KRas/Raw Data/RNA-Seq/Mouse colon epithelium/Analysis/CiberSort")
setwd("/Users/mizuhi/OneDrive - Harvard University/Haigis Lab/Projects/Halo-Ago2/Halo-Ago-KRas/Raw Data/RNA-Seq/Mouse colon epithelium/Analysis/CiberSort")
write.csv(cs_result, "CiberSort_de_analysis.csv")
